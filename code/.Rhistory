new_vec_1 + new_vec_2
# You can even add two vectors together (element by element addition)
# IMPORTANT: Make sure the two vectors are the same length
new_vec_1 + new_vec_2
# You can muliply vectors too (gives element by element multiplication)
# For those who know linear algebra, this is not vector multiplication
new_vec_1 * new_vec_2
10.2*18.8
# Functions like min and max take a vector as input and return a single value
min(new_vec_2)
max(new_vec_2)
# a data frame. R has built in data sets (e.g. iris, mtcars),
# and they're typically data frames too.
# Data frames are everywhere in R.
#
# Think of a data frame as a rectangular table where each
# column is vector (not always true... but don't worry about that for now).
# You can operate on the columns just like regular vectors (i.e. the stuff above)
#
# As an example, let's use the built-in R data set 'mtcars'
# This data set has information about cars.
mtcars
# a data frame. R has built in data sets (e.g. iris, mtcars),
# and they're typically data frames too.
# Data frames are everywhere in R.
#
# Think of a data frame as a rectangular table where each
# column is vector (not always true... but don't worry about that for now).
# You can operate on the columns just like regular vectors (i.e. the stuff above)
#
# As an example, let's use the built-in R data set 'mtcars'
# This data set has information about cars.
View(mtcars)
# Data frames have column names, and you can see what they are
# with the names function
names(mtcars)
# If you want to get data from a particular column, you use
# the '$' operator -- it's kind of strange, but you'll get
# used to it.
mtcars$mpg
# Let's compute the mean miles per gallon (mpg column)
mean(mtcars$mpg)
mtcars
# You can add a new column to a data frame as follows:
mtcars$my_col <- "NEW"
mtcars
# You can also create a new column from existing columns
# Since all columns have the same number of element (i.e. rows)
# R will perform the calculations element by element
mtcars$hp_times_mpg <- mtcars$hp * mtcars$mpg
View(mtcars)
source('~/Clients/SCBI/ASMSRWorkshops/2019/asms-2019-r-workshop-dev/code/00_quick_r_intro.R')
# Let's disect that:
#  the first part 'mtcars[' says we're going to subset the mtcars
#  data frame. Inside the [ ] we say how we want to subset.
#  The first part before the ',' is how we'll subset the rows.
#  The second part after the ',' is how we'll subset the columns.
# Here's the first part (the rows) by itself
mtcars$cyl == 4
# That's a boolean vector, one element for each row in mtcars
# Remember how we indexed a vector by boolean values above?
# Now, we're going to index the mtcars data frame in a similar way
#
# Let's look at the second part (the columns).
# Wait a second... there's nothing there! It's just blank space
# after the ','.
# When you don't specify anything after the column, that means
# to just take ALL the columns.
# Let's wrap it all together:
mtcars[mtcars$cyl == 4, ]
# The output is a new data frame that only contains the cars that
# have 4 cylinders
#
# We can also subset the columns, i.e.
mtcars[mtcars$cyl == 4, c("mpg", "hp")]
mtcars
# The output is a new data frame that only contains the cars that
# have 4 cylinders
#
# We can also subset the columns, i.e.
mtcars[mtcars$cyl == 4, c(1,4)]
# OR
mtcars[mtcars$cyl == 4, c("mpg", "hp")]
# IMPORTANT: make sure you have a comma
# inside the [ ]; that specifies the row
# and column selections.  This code (below)
# won't work:
mtcars[mtcars$cyl == 4]
# If you want to do analysis on a subset
# of the data, save the subset result to
# a variable and work with that
mtcars_4cyl <- mtcars[mtcars$cyl == 4, ]
mtcars_4cyl
mean(mtcars_4cyl$mpg)
source('~/Clients/SCBI/ASMSRWorkshops/2019/asms-2019-r-workshop-dev/code/00_quick_r_intro.R')
# a data frame. R has built in data sets (e.g. iris, mtcars),
# and they're typically data frames too.
# Data frames are everywhere in R.
#
# Think of a data frame as a rectangular table where each
# column is vector (not always true... but don't worry about that for now).
# You can operate on the columns just like regular vectors (i.e. the stuff above)
#
# As an example, let's use the built-in R data set 'mtcars'
# This data set has information about cars.
View(mtcars)
# Data frames have column names, and you can see what they are
# with the names function
names(mtcars)
# If you want to get data from a particular column, you use
# the '$' operator -- it's kind of strange, but you'll get
# used to it.
mtcars$mpg
# Let's compute the mean miles per gallon (mpg column)
mean(mtcars$mpg)
# Let's compute the mean miles per gallon (mpg column)
mean(mtcars$mpg)
sd(mtcars$mpg)
median(mtcars$mpg)
# You can add a new column to a data frame as follows:
mtcars$my_col <- "NEW"
View(mtcars)
# We can get the size the the data set with
nrows(mtcars)
# We can get the size the the data set with
nrow(mtcars)
ncol(mtcars)
# We can get the size the the data set with
nrow(mtcars)
ncol(mtcars)
# You can add a new column to a data frame as follows:
mtcars$my_col <- "NEW"
View(mtcars)
# We can get the size the the data set with
nrow(mtcars)
View(mtcars)
# Let's disect that:
#  the first part 'mtcars[' says we're going to subset the mtcars
#  data frame. Inside the [ ] we say how we want to subset.
#  The first part before the ',' is how we'll subset the rows.
#  The second part after the ',' is how we'll subset the columns.
# Here's the first part (the rows) by itself
mtcars$cyl == 4
# That's a boolean vector, one element for each row in mtcars
# Remember how we indexed a vector by boolean values above?
# Now, we're going to index the mtcars data frame in a similar way
#
# Let's look at the second part (the columns).
# Wait a second... there's nothing there! It's just blank space
# after the ','.
# When you don't specify anything after the column, that means
# to just take ALL the columns.
# Let's wrap it all together:
mtcars[mtcars$cyl == 4, ]
mtcars[,]
# The output is a new data frame that only contains the cars that
# have 4 cylinders
#
# We can also subset the columns, i.e.
mtcars[mtcars$cyl == 4, c(1,4)]
# OR
mtcars[mtcars$cyl == 4, c("mpg", "hp")]
# If you want to do analysis on a subset
# of the data, save the subset result to
# a variable and work with that
mtcars_4cyl <- mtcars[mtcars$cyl == 4, ]
View(mtcars_4_cyl)
View(mtcars_4cyl)
mean(mtcars_4cyl$mpg)
# dplyr examples using the 'storms' data set
library(dplyr)
# We’ll use the dplyr built in ‘storms’ data set
View(storms)
# Example dplyr pipeline
# Question: What is the mean wind speed and air pressure by year?
mean_stats <- storms %>%
group_by(year) %>%
summarize(mean_wind_speed = mean(wind),
mean_air_pressure = mean(pressure)) %>%
arrange(desc(mean_wind_speed))
View(mean_stats)
View(mean_stats_2)
# It's easy to add more summary statistics
mean_stats_2 <- storms %>%
group_by(year) %>%
summarize(mean_wind_speed = mean(wind),
mean_air_pressure = mean(pressure),
sd_wind_speed = sd(wind),
sd_air_pressure = mean(pressure)) %>%
arrange(desc(mean_wind_speed))
View(mean_stats_2)
View(storms)
# New Question: Which storm had the highest mean wind speed?
# Just group by name too!
mean_stats_3 <- storms %>%
group_by(name, year) %>%
summarize(mean_wind_speed = mean(wind),
mean_air_pressure = mean(pressure),
sd_wind_speed = sd(wind),
sd_air_pressure = mean(pressure)) %>%
arrange(desc(mean_wind_speed))
View(mean_stats_3)
# Let's make it a bit nicer
p6 <- ggplot(mean_stats, aes(year, mean_wind_speed)) +
geom_point(color = "steelblue", size = 4) +
geom_line(color = "tomato3") +
labs(
title = "Mean Wind Speed of Tropical Storms & Hurricans by Year",
x = "Year",
y = "Mean Wind Speed"
)
# ggplot2 examples using the 'storms' data set
library(ggplot2)
library(dplyr)
#=== This is the dplyr section from 01_dplyr_storms_example.R
# We’ll use the dplyr built in ‘storms’ data set
storms
tail(storms)
# Example dplyr pipeline
mean_stats <- storms %>%
group_by(year) %>%
summarize(mean_wind_speed = mean(wind),
mean_air_pressure = mean(pressure)) %>%
arrange(desc(mean_wind_speed))
mean_stats
#=== Now onto the ggplot2 stuff
# qplot examples
p1 <- qplot(mean_stats$year, mean_stats$mean_wind_speed)
p1
p2 <- qplot(mean_stats$mean_wind_speed)
p2
# ggplot examples
# points
p3 <- ggplot(mean_stats, aes(year, mean_wind_speed)) +
geom_point()
p3
# lines
p4 <- ggplot(mean_stats, aes(year, mean_wind_speed)) +
geom_line()
p4
# points and lines
p5 <- ggplot(mean_stats, aes(year, mean_wind_speed)) +
geom_point() +
geom_line()
p5
# Let's make it a bit nicer
p6 <- ggplot(mean_stats, aes(year, mean_wind_speed)) +
geom_point(color = "steelblue", size = 4) +
geom_line(color = "tomato3") +
labs(
title = "Mean Wind Speed of Tropical Storms & Hurricans by Year",
x = "Year",
y = "Mean Wind Speed"
)
# ggplot2 examples using the 'storms' data set
library(ggplot2)
library(dplyr)
#=== This is the dplyr section from 01_dplyr_storms_example.R
# We’ll use the dplyr built in ‘storms’ data set
storms
tail(storms)
# Example dplyr pipeline
mean_stats <- storms %>%
group_by(year) %>%
summarize(mean_wind_speed = mean(wind),
mean_air_pressure = mean(pressure)) %>%
arrange(desc(mean_wind_speed))
mean_stats
#=== Now onto the ggplot2 stuff
# qplot examples
p1 <- qplot(mean_stats$year, mean_stats$mean_wind_speed)
# ggplot2 examples using the 'storms' data set
library(ggplot2)
library(dplyr)
#=== This is the dplyr section from 01_dplyr_storms_example.R
# We’ll use the dplyr built in ‘storms’ data set
storms
tail(storms)
# Example dplyr pipeline
mean_stats <- storms %>%
group_by(year) %>%
summarize(mean_wind_speed = mean(wind),
mean_air_pressure = mean(pressure)) %>%
arrange(desc(mean_wind_speed))
mean_stats
#=== Now onto the ggplot2 stuff
# qplot examples
p1 <- qplot(mean_stats$year, mean_stats$mean_wind_speed)
# ggplot2 examples using the 'storms' data set
library(ggplot2)
# ggplot2 examples using the 'storms' data set
library(ggplot2)
# ggplot2 examples using the 'storms' data set
library(ggplot2)
library(dplyr)
#=== This is the dplyr section from 01_dplyr_storms_example.R
# We’ll use the dplyr built in ‘storms’ data set
storms
tail(storms)
# Example dplyr pipeline
mean_stats <- storms %>%
group_by(year) %>%
summarize(mean_wind_speed = mean(wind),
mean_air_pressure = mean(pressure)) %>%
arrange(desc(mean_wind_speed))
mean_stats
#=== Now onto the ggplot2 stuff
# qplot examples
p1 <- qplot(mean_stats$year, mean_stats$mean_wind_speed)
p1
p2 <- qplot(mean_stats$mean_wind_speed)
p2
# ggplot examples
# points
p3 <- ggplot(mean_stats, aes(year, mean_wind_speed)) +
geom_point()
p3
# lines
p4 <- ggplot(mean_stats, aes(year, mean_wind_speed)) +
geom_line()
p4
# points and lines
p5 <- ggplot(mean_stats, aes(year, mean_wind_speed)) +
geom_point() +
geom_line()
p5
# Let's make it a bit nicer
p6 <- ggplot(mean_stats, aes(year, mean_wind_speed)) +
geom_point(color = "steelblue", size = 4) +
geom_line(color = "tomato3") +
labs(
title = "Mean Wind Speed of Tropical Storms & Hurricans by Year",
x = "Year",
y = "Mean Wind Speed"
)
p6
# We can also add a trend line (statistical summary)
# Look! we can reuse the plot above and add on to it!
p7 <- p6 +
# This makes a simple linear trend line with 95% CI's
geom_smooth(method = "lm")
p7
# Examples with the mzR Bioconductor package
library(mzR)
# Also use the ggplot2 and dplyr package
library(ggplot2)
library(dplyr)
# When you set a seed this makes random number generation reproducible
# We'll use this when we randomly sample MS scans below
set.seed(12345)
# Example data from OpenMS Tutorial example data
# https://www.openms.de/tutorials/ --> Download Example Data --> Labelfree/datasets/lfq_spikein_dilution_1.mzML
# File: lfq_spikein_dilution_1.mzML
# Assumed to be in the same directory as this script
input_file_name <- "lfq_spikein_dilution_1.mzML"
ms_data <- openMSfile(input_file_name, backend = "pwiz")
# Investigate information about the instrument used and the run
# These functions return R lists, and you can access the list components with $
instr_info <- instrumentInfo(ms_data)
instr_info
run_info <- runInfo(ms_data)
run_info
# Get the header info for the scan -- summary information about each scan
scan_info <- header(ms_data)
View(scan_info)
# Let's look at some individual scans
# We can access that data via the peaks function
# First it's useful to separate out the MS1 and MS2 scans
#  also -- use dplyr pipeline!
ms1_scans <- scan_info %>% filter(msLevel == 1)
ms2_scans <- scan_info %>% filter(msLevel == 2)
View(ms1_scans)
?peaks
# Let's check out a random MS1 scan
# we can index the scans by the seqNum index of ms1_scans
# the sample function just randomly selects one particular ms1 scan index
spec_sel <- spectra(ms_data, sample(ms1_scans$seqNum, 1))
# peaks_sel is a matrix with two columns: mz & intensity
# turn it into a data frame, makes it easier for analysis and plotting
spec_sel <- as.data.frame(spec_sel)
View(spec_sel)
# make the column names meaningful!
names(spec_sel) <- c("mz", "intensity")
View(spec_sel)
# Time to plot
ggplot(spec_sel, aes(mz, intensity)) +
geom_segment(aes(x = mz, xend = mz, y = 0, yend = intensity))
ggplot(spec_sel, aes(mz, intensity)) +
geom_segment(aes(x = mz, xend = mz, y = 0, yend = intensity)) +
xlim(560, 575)
source('~/Clients/SCBI/ASMSRWorkshops/2019/asms-2019-r-workshop-dev/code/00_quick_r_intro.R')
# a data frame. R has built in data sets (e.g. iris, mtcars),
# and they're typically data frames too.
# Data frames are everywhere in R.
#
# Think of a data frame as a rectangular table where each
# column is vector (not always true... but don't worry about that for now).
# You can operate on the columns just like regular vectors (i.e. the stuff above)
#
# As an example, let's use the built-in R data set 'mtcars'
# This data set has information about cars.
View(mtcars)
# Data frames have column names, and you can see what they are
# with the names function
names(mtcars)
# We can get the size the the data set with
nrow(mtcars)
ncol(mtcars)
# If you want to get data from a particular column, you use
# the '$' operator -- it's kind of strange, but you'll get
# used to it.
mtcars$mpg
# Let's compute summary stats on miles per gallon (mpg column)
mean(mtcars$mpg)
sd(mtcars$mpg)
median(mtcars$mpg)
# dplyr examples using the 'storms' data set
library(dplyr)
# We’ll use the dplyr built in ‘storms’ data set
View(storms)
# Example dplyr pipeline
# Question: What is the mean wind speed and air pressure for each year?
mean_stats <- storms %>%
group_by(year) %>%
summarize(mean_wind_speed = mean(wind),
mean_air_pressure = mean(pressure)) %>%
arrange(desc(mean_wind_speed))
View(mean_stats)
# It's easy to add more summary statistics
mean_stats_2 <- storms %>%
group_by(year) %>%
summarize(mean_wind_speed = mean(wind),
mean_air_pressure = mean(pressure),
sd_wind_speed = sd(wind),
sd_air_pressure = sd(pressure)) %>%
arrange(desc(mean_wind_speed))
View(mean_stats_2)
# New Question: Which storm had the highest mean wind speed?
# Just group by name too!
mean_stats_3 <- storms %>%
group_by(name, year) %>%
summarize(mean_wind_speed = mean(wind),
mean_air_pressure = mean(pressure),
sd_wind_speed = sd(wind),
sd_air_pressure = mean(pressure)) %>%
arrange(desc(mean_wind_speed))
View(mean_stats_3)
# Let's make it a bit nicer
p6 <- ggplot(mean_stats, aes(year, mean_wind_speed)) +
geom_point(color = "steelblue", size = 4) +
geom_line(color = "tomato3") +
labs(
title = "Mean Wind Speed of Tropical Storms & Hurricans by Year",
x = "Year",
y = "Mean Wind Speed"
)
source('~/Clients/SCBI/ASMSRWorkshops/2019/asms-2019-r-workshop-dev/code/02_ggplot2_storms_example.R')
p6
# We can also add a trend line (statistical summary)
# Look! we can reuse the plot above and add on to it!
p7 <- p6 +
# This makes a simple linear trend line with 95% CI's
geom_smooth(method = "lm")
p7
# Examples with the mzR Bioconductor package
library(mzR)
# Also use the ggplot2 and dplyr package
library(ggplot2)
library(dplyr)
# When you set a seed this makes random number generation reproducible
# We'll use this when we randomly sample MS scans below
set.seed(12345)
# Example data from OpenMS Tutorial example data
# https://www.openms.de/tutorials/ --> Download Example Data --> Labelfree/datasets/lfq_spikein_dilution_1.mzML
# File: lfq_spikein_dilution_1.mzML
# Assumed to be in the same directory as this script
input_file_name <- "lfq_spikein_dilution_1.mzML"
ms_data <- openMSfile(input_file_name, backend = "pwiz")
# Investigate information about the instrument used and the run
# These functions return R lists, and you can access the list components with $
instr_info <- instrumentInfo(ms_data)
instr_info
run_info <- runInfo(ms_data)
run_info
# Get the header info for the scan -- summary information about each scan
scan_info <- header(ms_data)
# We can use the View function to easily explore the data
View(scan_info)
# Let's look at some individual scans
# We can access that data via the peaks function
# First it's useful to separate out the MS1 and MS2 scans
#  also -- use dplyr pipeline!
ms1_scans <- scan_info %>% filter(msLevel == 1)
ms2_scans <- scan_info %>% filter(msLevel == 2)
View(ms1_scans)
# Let's check out a random MS1 scan
# we can index the scans by the seqNum index of ms1_scans
# the sample function just randomly selects one particular ms1 scan index
spec_sel <- spectra(ms_data, sample(ms1_scans$seqNum, 1))
head(spec_sel)
# peaks_sel is a matrix with two columns: mz & intensity
# turn it into a data frame, makes it easier for analysis and plotting
spec_sel <- as.data.frame(spec_sel)
# make the column names meaningful!
names(spec_sel) <- c("mz", "intensity")
head(spec_sel)
# Time to plot
ggplot(spec_sel, aes(mz, intensity)) +
geom_segment(aes(x = mz, xend = mz, y = 0, yend = intensity))
ggplot(spec_sel, aes(mz, intensity)) +
geom_segment(aes(x = mz, xend = mz, y = 0, yend = intensity)) +
xlim(560, 575)
